{
  "version": 3,
  "sources": ["../../regression/dist/regression.js"],
  "sourcesContent": ["(function (global, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    define(['module'], factory);\r\n  } else if (typeof exports !== \"undefined\") {\r\n    factory(module);\r\n  } else {\r\n    var mod = {\r\n      exports: {}\r\n    };\r\n    factory(mod);\r\n    global.regression = mod.exports;\r\n  }\r\n})(this, function (module) {\r\n  'use strict';\r\n\r\n  function _defineProperty(obj, key, value) {\r\n    if (key in obj) {\r\n      Object.defineProperty(obj, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      });\r\n    } else {\r\n      obj[key] = value;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  var _extends = Object.assign || function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  };\r\n\r\n  function _toConsumableArray(arr) {\r\n    if (Array.isArray(arr)) {\r\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\r\n        arr2[i] = arr[i];\r\n      }\r\n\r\n      return arr2;\r\n    } else {\r\n      return Array.from(arr);\r\n    }\r\n  }\r\n\r\n  var DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n  /**\r\n  * Determine the coefficient of determination (r^2) of a fit from the observations\r\n  * and predictions.\r\n  *\r\n  * @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n  * @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n  *\r\n  * @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n  */\r\n  function determinationCoefficient(data, results) {\r\n    var predictions = [];\r\n    var observations = [];\r\n\r\n    data.forEach(function (d, i) {\r\n      if (d[1] !== null) {\r\n        observations.push(d);\r\n        predictions.push(results[i]);\r\n      }\r\n    });\r\n\r\n    var sum = observations.reduce(function (a, observation) {\r\n      return a + observation[1];\r\n    }, 0);\r\n    var mean = sum / observations.length;\r\n\r\n    var ssyy = observations.reduce(function (a, observation) {\r\n      var difference = observation[1] - mean;\r\n      return a + difference * difference;\r\n    }, 0);\r\n\r\n    var sse = observations.reduce(function (accum, observation, index) {\r\n      var prediction = predictions[index];\r\n      var residual = observation[1] - prediction[1];\r\n      return accum + residual * residual;\r\n    }, 0);\r\n\r\n    return 1 - sse / ssyy;\r\n  }\r\n\r\n  /**\r\n  * Determine the solution of a system of linear equations A * x = b using\r\n  * Gaussian elimination.\r\n  *\r\n  * @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n  * @param {number} order - How many degrees to solve for\r\n  *\r\n  * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n  */\r\n  function gaussianElimination(input, order) {\r\n    var matrix = input;\r\n    var n = input.length - 1;\r\n    var coefficients = [order];\r\n\r\n    for (var i = 0; i < n; i++) {\r\n      var maxrow = i;\r\n      for (var j = i + 1; j < n; j++) {\r\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n          maxrow = j;\r\n        }\r\n      }\r\n\r\n      for (var k = i; k < n + 1; k++) {\r\n        var tmp = matrix[k][i];\r\n        matrix[k][i] = matrix[k][maxrow];\r\n        matrix[k][maxrow] = tmp;\r\n      }\r\n\r\n      for (var _j = i + 1; _j < n; _j++) {\r\n        for (var _k = n; _k >= i; _k--) {\r\n          matrix[_k][_j] -= matrix[_k][i] * matrix[i][_j] / matrix[i][i];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var _j2 = n - 1; _j2 >= 0; _j2--) {\r\n      var total = 0;\r\n      for (var _k2 = _j2 + 1; _k2 < n; _k2++) {\r\n        total += matrix[_k2][_j2] * coefficients[_k2];\r\n      }\r\n\r\n      coefficients[_j2] = (matrix[n][_j2] - total) / matrix[_j2][_j2];\r\n    }\r\n\r\n    return coefficients;\r\n  }\r\n\r\n  /**\r\n  * Round a number to a precision, specificed in number of decimal places\r\n  *\r\n  * @param {number} number - The number to round\r\n  * @param {number} precision - The number of decimal places to round to:\r\n  *                             > 0 means decimals, < 0 means powers of 10\r\n  *\r\n  *\r\n  * @return {numbr} - The number, rounded\r\n  */\r\n  function round(number, precision) {\r\n    var factor = Math.pow(10, precision);\r\n    return Math.round(number * factor) / factor;\r\n  }\r\n\r\n  /**\r\n  * The set of all fitting methods\r\n  *\r\n  * @namespace\r\n  */\r\n  var methods = {\r\n    linear: function linear(data, options) {\r\n      var sum = [0, 0, 0, 0, 0];\r\n      var len = 0;\r\n\r\n      for (var n = 0; n < data.length; n++) {\r\n        if (data[n][1] !== null) {\r\n          len++;\r\n          sum[0] += data[n][0];\r\n          sum[1] += data[n][1];\r\n          sum[2] += data[n][0] * data[n][0];\r\n          sum[3] += data[n][0] * data[n][1];\r\n          sum[4] += data[n][1] * data[n][1];\r\n        }\r\n      }\r\n\r\n      var run = len * sum[2] - sum[0] * sum[0];\r\n      var rise = len * sum[3] - sum[0] * sum[1];\r\n      var gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n      var intercept = round(sum[1] / len - gradient * sum[0] / len, options.precision);\r\n\r\n      var predict = function predict(x) {\r\n        return [round(x, options.precision), round(gradient * x + intercept, options.precision)];\r\n      };\r\n\r\n      var points = data.map(function (point) {\r\n        return predict(point[0]);\r\n      });\r\n\r\n      return {\r\n        points: points,\r\n        predict: predict,\r\n        equation: [gradient, intercept],\r\n        r2: round(determinationCoefficient(data, points), options.precision),\r\n        string: intercept === 0 ? 'y = ' + gradient + 'x' : 'y = ' + gradient + 'x + ' + intercept\r\n      };\r\n    },\r\n    exponential: function exponential(data, options) {\r\n      var sum = [0, 0, 0, 0, 0, 0];\r\n\r\n      for (var n = 0; n < data.length; n++) {\r\n        if (data[n][1] !== null) {\r\n          sum[0] += data[n][0];\r\n          sum[1] += data[n][1];\r\n          sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n          sum[3] += data[n][1] * Math.log(data[n][1]);\r\n          sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n          sum[5] += data[n][0] * data[n][1];\r\n        }\r\n      }\r\n\r\n      var denominator = sum[1] * sum[2] - sum[5] * sum[5];\r\n      var a = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\r\n      var b = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\r\n      var coeffA = round(a, options.precision);\r\n      var coeffB = round(b, options.precision);\r\n      var predict = function predict(x) {\r\n        return [round(x, options.precision), round(coeffA * Math.exp(coeffB * x), options.precision)];\r\n      };\r\n\r\n      var points = data.map(function (point) {\r\n        return predict(point[0]);\r\n      });\r\n\r\n      return {\r\n        points: points,\r\n        predict: predict,\r\n        equation: [coeffA, coeffB],\r\n        string: 'y = ' + coeffA + 'e^(' + coeffB + 'x)',\r\n        r2: round(determinationCoefficient(data, points), options.precision)\r\n      };\r\n    },\r\n    logarithmic: function logarithmic(data, options) {\r\n      var sum = [0, 0, 0, 0];\r\n      var len = data.length;\r\n\r\n      for (var n = 0; n < len; n++) {\r\n        if (data[n][1] !== null) {\r\n          sum[0] += Math.log(data[n][0]);\r\n          sum[1] += data[n][1] * Math.log(data[n][0]);\r\n          sum[2] += data[n][1];\r\n          sum[3] += Math.pow(Math.log(data[n][0]), 2);\r\n        }\r\n      }\r\n\r\n      var a = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);\r\n      var coeffB = round(a, options.precision);\r\n      var coeffA = round((sum[2] - coeffB * sum[0]) / len, options.precision);\r\n\r\n      var predict = function predict(x) {\r\n        return [round(x, options.precision), round(round(coeffA + coeffB * Math.log(x), options.precision), options.precision)];\r\n      };\r\n\r\n      var points = data.map(function (point) {\r\n        return predict(point[0]);\r\n      });\r\n\r\n      return {\r\n        points: points,\r\n        predict: predict,\r\n        equation: [coeffA, coeffB],\r\n        string: 'y = ' + coeffA + ' + ' + coeffB + ' ln(x)',\r\n        r2: round(determinationCoefficient(data, points), options.precision)\r\n      };\r\n    },\r\n    power: function power(data, options) {\r\n      var sum = [0, 0, 0, 0, 0];\r\n      var len = data.length;\r\n\r\n      for (var n = 0; n < len; n++) {\r\n        if (data[n][1] !== null) {\r\n          sum[0] += Math.log(data[n][0]);\r\n          sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n          sum[2] += Math.log(data[n][1]);\r\n          sum[3] += Math.pow(Math.log(data[n][0]), 2);\r\n        }\r\n      }\r\n\r\n      var b = (len * sum[1] - sum[0] * sum[2]) / (len * sum[3] - Math.pow(sum[0], 2));\r\n      var a = (sum[2] - b * sum[0]) / len;\r\n      var coeffA = round(Math.exp(a), options.precision);\r\n      var coeffB = round(b, options.precision);\r\n\r\n      var predict = function predict(x) {\r\n        return [round(x, options.precision), round(round(coeffA * Math.pow(x, coeffB), options.precision), options.precision)];\r\n      };\r\n\r\n      var points = data.map(function (point) {\r\n        return predict(point[0]);\r\n      });\r\n\r\n      return {\r\n        points: points,\r\n        predict: predict,\r\n        equation: [coeffA, coeffB],\r\n        string: 'y = ' + coeffA + 'x^' + coeffB,\r\n        r2: round(determinationCoefficient(data, points), options.precision)\r\n      };\r\n    },\r\n    polynomial: function polynomial(data, options) {\r\n      var lhs = [];\r\n      var rhs = [];\r\n      var a = 0;\r\n      var b = 0;\r\n      var len = data.length;\r\n      var k = options.order + 1;\r\n\r\n      for (var i = 0; i < k; i++) {\r\n        for (var l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            a += Math.pow(data[l][0], i) * data[l][1];\r\n          }\r\n        }\r\n\r\n        lhs.push(a);\r\n        a = 0;\r\n\r\n        var c = [];\r\n        for (var j = 0; j < k; j++) {\r\n          for (var _l = 0; _l < len; _l++) {\r\n            if (data[_l][1] !== null) {\r\n              b += Math.pow(data[_l][0], i + j);\r\n            }\r\n          }\r\n          c.push(b);\r\n          b = 0;\r\n        }\r\n        rhs.push(c);\r\n      }\r\n      rhs.push(lhs);\r\n\r\n      var coefficients = gaussianElimination(rhs, k).map(function (v) {\r\n        return round(v, options.precision);\r\n      });\r\n\r\n      var predict = function predict(x) {\r\n        return [round(x, options.precision), round(coefficients.reduce(function (sum, coeff, power) {\r\n          return sum + coeff * Math.pow(x, power);\r\n        }, 0), options.precision)];\r\n      };\r\n\r\n      var points = data.map(function (point) {\r\n        return predict(point[0]);\r\n      });\r\n\r\n      var string = 'y = ';\r\n      for (var _i = coefficients.length - 1; _i >= 0; _i--) {\r\n        if (_i > 1) {\r\n          string += coefficients[_i] + 'x^' + _i + ' + ';\r\n        } else if (_i === 1) {\r\n          string += coefficients[_i] + 'x + ';\r\n        } else {\r\n          string += coefficients[_i];\r\n        }\r\n      }\r\n\r\n      return {\r\n        string: string,\r\n        points: points,\r\n        predict: predict,\r\n        equation: [].concat(_toConsumableArray(coefficients)).reverse(),\r\n        r2: round(determinationCoefficient(data, points), options.precision)\r\n      };\r\n    }\r\n  };\r\n\r\n  function createWrapper() {\r\n    var reduce = function reduce(accumulator, name) {\r\n      return _extends({\r\n        _round: round\r\n      }, accumulator, _defineProperty({}, name, function (data, supplied) {\r\n        return methods[name](data, _extends({}, DEFAULT_OPTIONS, supplied));\r\n      }));\r\n    };\r\n\r\n    return Object.keys(methods).reduce(reduce, {});\r\n  }\r\n\r\n  module.exports = createWrapper();\r\n});\r\n"],
  "mappings": "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",
  "names": ["module", "predict", "reduce"]
}
